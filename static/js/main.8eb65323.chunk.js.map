{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","simulations","setSimulations","doors","setDoors","simResults","setSimResults","console","log","className","value","onChange","event","target","onClick","iterations","correctForStayingCount","correctForSwitchingCount","i","correctDoor","Math","floor","random","chosenDoor","correctForStaying","correctForSwitching","shownDoor","switchDoor","newResult","winningDoor","initGuessDoor","revealedDoor","correctForSwitchingDoor","push","toFixed","map","iteration","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8eb65323.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [simulations, setSimulations] = useState(1000);\n  const [doors, setDoors] = useState(3);\n  const [simResults, setSimResults] = useState(null);\n  const [showIntroduction, setShowIntroduction] = useState(true);\n\n  console.log(simResults);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Monty Hall Problem Simulator</h1>\n      </header>\n      <div className=\"App-container\">\n        <div className=\"grid-container\">\n          <div className=\"App-introduction\">\n            <p>\n              The Monty Hall problem is an interesting statistical paradox based\n              on the American TV game show, Let's make a Deal. The game show\n              host would ask a contestant to choose 1 out of 3 doors, two doors\n              which hid a goat each, and one that revealed a new car. The host\n              will then reveal a door that the contestant did not pick and had a\n              goat behind it, and then ask the contestant if they would like to\n              switch their choice. Although many would say all doors had an\n              equal chance to lead to the prize of a car, statisticians found\n              that this was not the case. This site will simulate many times the\n              outcomes to help show that switching is a more favorable choice\n              than staying on an initial decision\n            </p>\n            <button className=\"minimize-button\">-</button>\n          </div>\n          <div className=\"App-form\">\n            <div className=\"App-sim-select\">\n              <label>\n                How many simulations?\n                <select\n                  value={simulations}\n                  onChange={event => setSimulations(event.target.value)}\n                >\n                  <option value=\"10\">10</option>\n                  <option value=\"100\">100</option>\n                  <option value=\"1000\">1000</option>\n                  <option value=\"1000000\">1000000</option>\n                  <option value=\"1000000000\">100000000</option>\n                </select>\n              </label>\n            </div>\n            <div className=\"App-door-select\">\n              <label>\n                How many doors?<br></br>\n                <select\n                  value={doors}\n                  onChange={event => setDoors(event.target.value)}\n                >\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                  <option value=\"10\">10</option>\n                </select>\n              </label>\n            </div>\n            <button\n              className=\"button\"\n              onClick={() => {\n                const iterations = [];\n                let correctForStayingCount = 0;\n                let correctForSwitchingCount = 0;\n\n                for (let i = 1; i <= simulations; i++) {\n                  const correctDoor = Math.floor(Math.random() * doors);\n                  const chosenDoor = Math.floor(Math.random() * doors);\n\n                  let correctForStaying = false;\n                  let correctForSwitching = false;\n                  let shownDoor = chosenDoor;\n                  while (\n                    shownDoor === chosenDoor ||\n                    shownDoor === correctDoor\n                  ) {\n                    shownDoor = Math.floor(Math.random() * doors);\n                  }\n                  // For Staying\n                  if (chosenDoor === correctDoor) {\n                    correctForStayingCount++;\n                    correctForStaying = true;\n                  }\n\n                  // For Switching\n                  let switchDoor = chosenDoor;\n                  while (\n                    switchDoor === chosenDoor ||\n                    switchDoor === shownDoor\n                  ) {\n                    switchDoor = Math.floor(Math.random() * doors);\n                  }\n                  if (switchDoor === correctDoor) {\n                    correctForSwitchingCount++;\n                    correctForSwitching = true;\n                  }\n                  if (i <= 100) {\n                    const newResult = {\n                      winningDoor: correctDoor,\n                      initGuessDoor: chosenDoor,\n                      revealedDoor: shownDoor,\n                      correctForSwitchingDoor: switchDoor,\n                      correctForSwitching,\n                      correctForStaying\n                    };\n                    iterations.push(newResult);\n                  }\n                }\n                setSimResults({\n                  iterations,\n                  correctForStayingCount,\n                  correctForSwitchingCount\n                });\n              }}\n            >\n              Start\n            </button>\n          </div>\n        </div>\n        {simResults && (\n          <div className=\"App-results\">\n            <h2>Results</h2>\n            <div>\n              {simulations} completed for {doors} doors\n            </div>\n            <div>\n              {simResults.correctForSwitchingCount}/{simulations} (\n              {(\n                (simResults.correctForSwitchingCount / simulations) *\n                100\n              ).toFixed(2)}\n              %) correct for switching.\n            </div>\n            <div>\n              {simResults.correctForStayingCount}/{simulations} (\n              {(\n                (simResults.correctForStayingCount / simulations) *\n                100\n              ).toFixed(2)}\n              %) correct for staying.\n            </div>\n            <div className=\"App-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th className=\"first-column\">#</th>\n                    <th className=\"second-column\">Winning Door</th>\n                    <th>Initial Guess</th>\n                    <th>Revealed Door</th>\n                    <th>Second Guess</th>\n                    <th>Switch Result</th>\n                    <th>Stay Result</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {simResults.iterations.map((iteration, index) => {\n                    return (\n                      <tr key={index}>\n                        <td className=\"first-column\">{index + 1}</td>\n                        <td className=\"second-column\">\n                          {iteration.winningDoor + 1}\n                        </td>\n                        <td>{iteration.initGuessDoor + 1}</td>\n                        <td>{iteration.revealedDoor + 1}</td>\n                        <td>{iteration.correctForSwitchingDoor + 1}</td>\n                        <td>\n                          {iteration.correctForSwitching\n                            ? \"Correct\"\n                            : \"Incorrect\"}\n                        </td>\n                        <td>\n                          {iteration.correctForStaying\n                            ? \"Correct\"\n                            : \"Incorrect\"}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}